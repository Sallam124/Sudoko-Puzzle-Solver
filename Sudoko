B =[
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 8],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7]
]

def solution(board):
    find = empty(board)
    if not find:
        return True
    else:
        row,col = find
    for i in range (1,10):
        if if_valid(board,i, (row,col)):
            board [row][col] = i

            if solution(board):
                return True
            board [row][col] = 0
    return False


def if_valid(board,num,position):
# To Check for any repeated numbers in a Row
    for i in range (len(board[0])):
        if board[position[0]][i] == num and position [1]  != i:
            return False

#To check for any repeated numbers in a column
    for i in range (len(board)):
        if board[i][position[1]] == num and position [0] != i:
            return False
# To check which box the program is currently in
    box_x = position[0]//3
    box_y = position[1]//3
    for i in range (box_x * 3, box_x*3+3):
        for j in range (box_y*3,box_y*3 + 3):
            if board[i][j]== num and (i,j) != position:
                return False
    return True


def print_board(board):
    for i in range (len(board)):
        if i % 3 == 0 and i != 0:
            print(" - - - - - - - - - - - - ")
        for j in range (len(board[0])):
            if j % 3 == 0:
                print(" | ", end="")

            if j == 8 :
                print(board[i][j])
            else:
                print(str(board[i][j])+ " ", end="")


def empty(board):
# To check for all empty squares on the board (0's)
    for i in range(len(board)):
        for j in range (len(board[0])):
            if board [i][j] == 0:
                return ( i , j)
    return None


print_board(B)
solution(B)
print("\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n")
print_board(B)
